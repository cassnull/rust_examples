use postgres::{Client, NoTls};
use serde::Deserialize;

#[derive(Deserialize)]
struct Artist {
    #[serde(skip_deserializing)]
    _id: i32,
    #[serde(rename = "ConstituentID")]
    constituent_id: i32,
    #[serde(rename = "DisplayName")]
    display_name: Option<String>,
    #[serde(rename = "ArtistBio")]
    artist_bio: Option<String>,
    #[serde(rename = "Nationality")]
    nationality: Option<String>,
    #[serde(rename = "Gender")]
    gender: Option<String>,
    #[serde(rename = "BeginDate")]
    begin_date: Option<i16>,
    #[serde(rename = "EndDate")]
    end_date: Option<i16>,
    #[serde(rename = "Wiki QID")]
    wiki_qid: Option<String>,
    #[serde(rename = "ULAN")]
    ulan: Option<i32>,
}

struct Nation {
    nationality: String,
    count: i64,
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let mut client = Client::connect("postgresql://postgres:postgres@localhost/moma", NoTls)?;

    client.batch_execute("DROP TABLE IF EXISTS artists;")?;

    client.batch_execute(
        "
        CREATE TABLE artists
        (
            id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            constituent_id INTEGER NOT NULL UNIQUE,
            display_name TEXT,
            artist_bio TEXT,
            nationality TEXT,
            gender TEXT,
            begin_date SMALLINT,
            end_date SMALLINT,
            wiki_qid TEXT,
            ulan INTEGER
        );
    ",
    )?;

    let mut reader = csv::Reader::from_path("Artists.csv")?;
    for record in reader.deserialize() {
        let artist: Artist = record?;

        client.execute(
            "INSERT INTO artists (constituent_id, display_name, artist_bio, nationality, gender, begin_date, end_date, wiki_qid, ulan)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9);",
            &[
                &artist.constituent_id, &artist.display_name, &artist.artist_bio, &artist.nationality, &artist.gender, &artist.begin_date, &artist.end_date, &artist.wiki_qid, &artist.ulan,
            ],
        )?;
    }

    for row in client.query(
        "SELECT nationality, COUNT(nationality) AS count FROM artists GROUP BY nationality ORDER BY count DESC;",
        &[],
    )? {
        let (nationality, count): (Option<String>, Option<i64>) = (row.get(0), row.get(1));

        if nationality.is_some() && count.is_some() {
            let nation = Nation {
                nationality: nationality.unwrap(),
                count: count.unwrap(),
            };
            println!("{} {}", nation.nationality, nation.count);
        }
    }

    client.batch_execute("DROP TABLE artists;")?;

    Ok(())
}
